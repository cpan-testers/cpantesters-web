
; --- Project details
name             = CPAN-Testers-Web
author           = Doug Bell <preaction@cpan.org>
license          = Perl_5
copyright_holder = Doug Bell
copyright_year   = 2016

[Authority]
authority  = cpan:PREACTION
do_munging = 0

[GithubMeta]
homepage = http://cpantesters.org
issues = 1
[MetaResources]
IRC = irc://irc.perl.org/#cpantesters-discuss

; --- Module management
[@Filter]
-bundle = @Basic
; GatherDir must be configured separately
-remove = GatherDir
-remove = Readme

[Readme::Brief]
[ReadmeAnyFromPod]
location = root
filename = README.mkdn
type = markdown

[PodWeaver]
replacer = replace_with_comment
post_code_replacer = replace_with_nothing
[RewriteVersion]
[CPANFile]
[MetaJSON]
[MetaProvides::Package]
[MetaNoIndex]
directory = t
directory = xt
directory = inc
directory = share
directory = eg
directory = examples
[Git::Contributors]
; authordep Pod::Weaver::Section::Contributors
[Test::ReportPrereqs]
[Test::Compile]

; --- Repository management
[Git::GatherDir]
include_dotfiles = 1
prune_directory = ^eg
; Exclude dotfiles in the root directory
exclude_match = ^\.[^/]+$
; Exclude generated root content, which is included by the various plugins
; Without this, we get an error about duplicate content
exclude_filename = cpanfile
exclude_filename = META.json
exclude_filename = LICENSE
exclude_filename = README
exclude_filename = README.mkdn
exclude_filename = Makefile.PL

; Add node modules
[GatherDir / NodeModules]
root = share/node_modules
prefix = share/node_modules

[CopyFilesFromBuild]
; Copy generated content to the repository root so users without Dist::Zilla
; can use it
copy = cpanfile
copy = META.json
copy = LICENSE
copy = Makefile.PL

[Run::AfterBuild]
; Add travis and coveralls badges to README.mkdn
run = perl -pi -e 's{(# SYNOPSIS)}{# STATUS\n\n<a href="https://travis-ci.org/cpan-testers/cpantesters-web"><img src="https://travis-ci.org/cpan-testers/cpantesters-web.svg?branch=master"></a><a href="https://coveralls.io/r/cpan-testers/cpantesters-web"><img src="https://coveralls.io/repos/cpan-testers/cpantesters-web/badge.png" alt="Coverage Status" /></a>\n\n$1}' README.mkdn

; --- Git management
[CheckChangesHasContent]
changelog = CHANGES
[Git::Check]
; Automatically commit these files during release
allow_dirty_match = README.*
allow_dirty_match = .*[.]PL
allow_dirty = cpanfile
allow_dirty = LICENSE
allow_dirty = CHANGES
allow_dirty = META.json

[Git::Commit / Commit_Dirty_Files]
; Automatically commit with release version and changelog
changelog = CHANGES
commit_msg = release v%v%n%n%c
allow_dirty_match = README.*
allow_dirty_match = .*[.]PL
allow_dirty = cpanfile
allow_dirty = LICENSE
allow_dirty = CHANGES
allow_dirty = META.json
add_files_in = .
[Git::Tag]
changelog = CHANGES
tag_message = %N v%v - %{yyyy-MM-dd}d%n%n%c ; Tag annotations show up in github release list

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new 
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual

[NextRelease]
filename = CHANGES
[BumpVersionAfterRelease]

[Git::Commit / Commit_Changes]
commit_msg = incrementing version after release
allow_dirty = CHANGES
allow_dirty_match = ^bin/
allow_dirty_match = ^lib/.*\.pm$
allow_dirty_match = .*[.]PL
[Git::Push]

; --- Project-specific directives

[Prereqs]
perl = 5.024
Mojolicious = 7.40 ; Added MOJO_LOG_SHORT
Mojolicious::Plugin::Config = 0
Mojolicious::Plugin::AssetPack = 0
Mojolicious::Plugin::OAuth2 = 0
CPAN::Testers::Schema = 0.024
File::Share = 0
Log::Any = 1.045 ; Returns message and faster
Log::Any::Adapter::MojoLog = 0.02
Import::Base = 0.012 ; Fixed using subs in imports
Minion = 8 ; Add minion admin UI
Minion::Backend::mysql = 0.15 ; Support MySQL 8
Mojolicious::Plugin::Yancy = 1.005 ; Support backend hash config
Mojo::mysql = 1.04
Email::Stuffer = 0

; Requried by AssetPack because I'm using CSS and JS...
CSS::Minifier::XS = 0
JavaScript::Minifier::XS = 0

; Required for legacy metabase data 
CPAN::Testers::Report = 0
Metabase::User::Profile = 0
Data::FlexSerializer = 0
JSON::MaybeXS = 0
Sereal = 0
CPAN::DistnameInfo = 0

;-- Common prereqs with minimum version requirements
;Path::Tiny = 0.072 ; Fixes issues with File::Path
;List::Util = 1.29 ; First version with pair* functions
;Getopt::Long = 2.36 ; First version with GetOptionsFromArray
;Import::Base = 0.012 ; Fixed using subs in imports
;Log::Any = 1.045 ; Returns message and faster

[Prereqs / TestRequires]
Test::More = 1.001005 ; First version that allows args to subtests
;Test::Lib = 0
;Test::Deep = 0
;Test::Differences = 0
;Test::Fatal = 0
DateTime::Format::SQLite = 0
